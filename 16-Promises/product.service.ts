type Product = {
  id: string;          // Generated by the database
  name: string;
  description: string;
  price: number;
  stock: number;
  category: 'electronics' | 'books' | 'apparel';
  createdAt: Date;     // Set by the server on creation
  updatedAt: Date;     // Set by the server on update
};

const products: Product[] = [
    {
        id: 'abc-123',
        name: 'Quantum Laptop',
        description: 'A laptop from the future.',
        price: 2500,
        stock: 15,
        category: 'electronics',
        createdAt: new Date(),
        updatedAt: new Date(),
    },
    {
        id: 'def-456',
        name: 'Ergonomic Keyboard',
        description: 'Type for hours without strain.',
        price: 150,
        stock: 50,
        category: 'electronics',
        createdAt: new Date(),
        updatedAt: new Date(),
    }
];

type updateProductSuccessResponse={
    status:true;
    product:Product;
}

type updateProductFailureResponse={
    status:false;
    message:string;
}

export type UpdateProductResponse=updateProductFailureResponse | updateProductSuccessResponse;

export async function updateProduct(id:string,data:Partial<Product>):Promise<UpdateProductResponse>{
  return new Promise((resolve,reject)=>{
    setTimeout(()=>{
      try{
        const result=products.find(product=>product.id===id);
        if(result!=undefined){
          Object.assign(result,data);
          result.updatedAt=new Date();
          resolve({status:true,product:result})
        }else{
          resolve({status:false,message:'Product not found'})
        }
      }catch(error){
        reject(new Error(`Error updating product ${error}`))
      }
    },1000)
  })
}

function logProductAnalytics(data:Readonly<Product>):void{}